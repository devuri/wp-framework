import{_ as e,c as n,o as i,a4 as o}from"./chunks/framework.ZNwHIQsX.js";const m=JSON.parse('{"title":"Managing Environments","description":"","frontmatter":{},"headers":[],"relativePath":"guide/environments.md","filePath":"guide/environments.md"}'),t={name:"guide/environments.md"},r=o('<h1 id="managing-environments" tabindex="-1">Managing Environments <a class="header-anchor" href="#managing-environments" aria-label="Permalink to &quot;Managing Environments&quot;">​</a></h1><p>The Raydium Framework offers a sophisticated way to handle different environments such as development, staging, and production. This guide will help you understand how to effectively manage these environments within your Raydium-powered application.</p><h2 id="understanding-environments" tabindex="-1">Understanding Environments <a class="header-anchor" href="#understanding-environments" aria-label="Permalink to &quot;Understanding Environments&quot;">​</a></h2><p>Environments are essentially different states your application can be in, each with its own set of configurations and behaviors. Common environments include:</p><ul><li><strong>Development (<code>dev</code>)</strong>: Used during the development phase, with extensive logging, error reporting, and debugging tools enabled.</li><li><strong>Staging (<code>staging</code>)</strong>: Mirrors the production environment for testing purposes. It&#39;s a final check before an update goes live.</li><li><strong>Production (<code>prod</code>)</strong>: The live site where performance and security are optimized, and debugging tools are typically turned off.</li><li><strong>Debug (<code>debug</code>)</strong>: A special case of the development environment with additional debugging capabilities.</li><li><strong>Secure (<code>secure</code>)</strong>: An environment with heightened security measures, often used in sensitive applications.</li></ul><h2 id="configuring-environments" tabindex="-1">Configuring Environments <a class="header-anchor" href="#configuring-environments" aria-label="Permalink to &quot;Configuring Environments&quot;">​</a></h2><h3 id="using-env-file" tabindex="-1">Using <code>.env</code> File <a class="header-anchor" href="#using-env-file" aria-label="Permalink to &quot;Using `.env` File&quot;">​</a></h3><p>The Raydium Framework leverages a <code>.env</code> <a href="./../guide/environment-file.html">environment file</a> at the root of your project to define environment variables. The key variable for setting the application&#39;s environment is <code>WP_ENVIRONMENT_TYPE</code>.</p><p>Example of a <code>.env</code> file configuration:</p><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>WP_ENVIRONMENT_TYPE=&#39;prod&#39;</span></span></code></pre></div><p>This configuration sets the application&#39;s environment to production. Depending on this setting, the Raydium Framework adjusts its behavior accordingly, optimizing for performance, security, or debugging capabilities.</p><h3 id="supported-environment-values" tabindex="-1">Supported Environment Values <a class="header-anchor" href="#supported-environment-values" aria-label="Permalink to &quot;Supported Environment Values&quot;">​</a></h3><ul><li><code>prod</code> or <code>production</code>: Sets the environment to production.</li><li><code>dev</code> or <code>development</code>: Sets the environment to development.</li><li><code>staging</code>: Sets the environment to staging.</li><li><code>debug</code> or <code>deb</code>: Activates the debug environment.</li><li><code>secure</code> or <code>sec</code>: Activates the secure environment.</li></ul><h2 id="environment-specific-behaviors" tabindex="-1">Environment-Specific Behaviors <a class="header-anchor" href="#environment-specific-behaviors" aria-label="Permalink to &quot;Environment-Specific Behaviors&quot;">​</a></h2><p>Depending on the <code>WP_ENVIRONMENT_TYPE</code> value, the Raydium Framework configures the application as follows:</p><ul><li><strong>Production</strong>: Maximizes performance and security. Disables debugging tools and error displays.</li><li><strong>Staging</strong>: Similar to production but might have logging or error reporting enabled for testing.</li><li><strong>Development</strong>: Enables error reporting, debugging tools, and might have performance optimizations disabled for easier troubleshooting.</li><li><strong>Debug</strong>: Extends development settings with additional debugging capabilities, such as script debugging and query logging.</li><li><strong>Secure</strong>: Similar to production with additional security measures like file editing restrictions and stringent error handling.</li></ul><h2 id="switching-environments" tabindex="-1">Switching Environments <a class="header-anchor" href="#switching-environments" aria-label="Permalink to &quot;Switching Environments&quot;">​</a></h2><p>To switch environments, simply change the <code>WP_ENVIRONMENT_TYPE</code> value in your <code>.env</code> file and redeploy your application if necessary. The Raydium Framework automatically detects this change and applies the corresponding configuration settings.</p><h2 id="best-practices" tabindex="-1">Best Practices <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;Best Practices&quot;">​</a></h2><ul><li><strong>Keep <code>.env</code> Secure</strong>: The <code>.env</code> <a href="./environment-file.html">environment file</a> contains sensitive information. Ensure it&#39;s properly excluded from version control systems (e.g., using <code>.gitignore</code>).</li><li><strong>Environment Consistency</strong>: Maintain consistency between your development, staging, and production environments to prevent &quot;it works on my machine&quot; issues.</li><li><strong>Use Environment-Specific Configurations</strong>: Leverage the capability to define environment-specific settings for database connections, API keys, and other configurations.</li></ul><blockquote><p>Effectively managing environments in the Raydium Framework enhances your application&#39;s development lifecycle, offering seamless transitions from development to production. By leveraging the <code>.env</code> file for environment configuration, you ensure flexibility, security, and efficiency throughout your application&#39;s deployment process.</p></blockquote>',21),a=[r];function s(d,c,l,g,u,p){return i(),n("div",null,a)}const v=e(t,[["render",s]]);export{m as __pageData,v as default};
